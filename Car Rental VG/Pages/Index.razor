@page "/"
@using Car_Rental.Common.Enums;
@using Car_Rental.Common.Interfaces;
@using Car_Rental.Business.Classes;
@inject BookingProcessor bp;
<PageTitle>Car Rental Assignment - VG</PageTitle>
<h1>Car Rental Assignment - VG</h1>
<div class="row">
	@*Tabell för fordon*@
	<h6>Vehicles</h6>
	<table class="table table-borderless table-hover">
		<thead>
			<tr>
				<th>RegNo</th>
				<th>Make</th>
				<th>Odometer</th>
				<th>Cost Km</th>
				<th>Vehicle Type</th>
				<th>$ Day</th>
				<th>Action</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><input @bind=bp.RegNoInput placeholder="RegNo" /> </td>
				<td><input @bind=bp.MakeInput placeholder="Make" /> </td>
				<td><input @bind=bp.OdoMeterInput /></td>
				<td><input @bind=bp.CostPerKmInput /></td>
				<td>
					@*	<InputSelect @bind-Value="bp.VehicleTypeNames">
					@foreach (var gender in Enum.GetValues(typeof(VehicleTypes)))
					{
					<option value="@gender">@gender</option>
					}
					</InputSelect>*@

				</td>

				<td></td>
				<td><button>Add</button> </td>
			</tr>
			@foreach (var v in bp.GetVehicles())
			{
				<tr>
					<td><strong>@v.RegNo</strong> </td>
					<td>@v.Make</td>
					<td>@v.Odometer</td>
					<td>@v.CostPerKm</td>
					<td>@v.VehicleType</td>
					<td>@v.CostPerDay</td>
					<td></td>
					<td>
						@if (v.VehicleStatus.Equals(VehicleStatuses.Available))
						{
							<span class="badge bg-dark">Available</span>
						}
						@if (v.VehicleStatus.Equals(VehicleStatuses.Booked))
						{
							<span class="badge bg-danger">Booked</span>
						}
						@if (v.VehicleStatus.Equals(VehicleStatuses.Unknown))
						{
							<span class="badge bg-warning">Unknown</span>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>
<br />
@*Tabell för bokningar*@
<div class="row">
	<h6>Bookings</h6>
	<table class="table table-hover">
		<thead>
			<tr>
				<th>RegNo</th>
				<th>Customer</th>
				<th>Km Reneted</th>
				<th>Km Returned</th>
				<th>Reneted</th>
				<th>Returned</th>
				<th>Cost</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var b in bp.GetBookings())
			{
				<tr>
					<td><strong>@b.RegNo</strong> </td>
					<td>@b.Customer.LastName @b.Customer.FirstName (@b.Customer.SSN)</td>
					<td>@b.KmReneted</td>
					<td>@b.KmReturned</td>
					<td>@b.Reneted.ToString("d")</td>
					<td>
						@if (b.Returned != default)
						{
							@b.Returned.ToString("d")
						}
					</td>
					<td>@b.Cost</td>
					<td>
						@if (b.BookingStatus.Equals(BookingStatuses.Closed))
						{
							<span class="badge bg-pill bg-success">Closed</span>
						}
						@if (b.BookingStatus.Equals(BookingStatuses.None))
						{
							<span class="badge bg-pill bg-warning">None</span>
						}
						@if (b.BookingStatus.Equals(BookingStatuses.Open))
						{
							<span class="badge bg-pill bg-danger">Open</span>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>
@*OM b.Message INTE är tomt så visas ett felmeddelande i gränsnittet
  som är bundet till en specifik bokning. *@
@foreach (var b in bp.GetBookings())
{
	@if (b.Message != string.Empty)
	{
		<div class="alert alert-danger" role="alert">
			<strong>Error!</strong> @b.Message
		</div>
	}
}
<br />
@*Tabell för kunder*@
<div class="row">
	<h6>Customers</h6>
	<table class="table table-hover">
		<thead>
			<tr>
				<th>SSN</th>
				<th>Last Name</th>
				<th>First Name</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><input @bind="bp.SSNInput" placeholder="SSN" /></td>
				<td><input @bind="bp.LastNameInput" placeholder="Last Name" /></td>
				<td><input @bind="bp.FirstNameInput" placeholder="First Name" /></td>
				<td><button @onclick="(() => bp.AddPerson())">Add</button> </td>
			</tr>
			@foreach (var p in bp.GetPersons())
			{
				<tr>
					<td><strong>@p.SSN</strong></td>
					<td>@p.LastName</td>
					<td>@p.FirstName</td>
					<td></td>
				</tr>
			}
		</tbody>
	</table>
</div>